<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
	id="WebApp_ID" version="3.1">
	<display-name>KHome</display-name>

	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>

	<!-- 监听器 begin -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Spring 刷新Introspector防止内存泄露 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>

	<!-- RequestContextFilter实现ServletRequestListener监听器接口，该监听器监听HTTP请求事件，Web服务器接收的每次请求都会通知该监听器。通过配置RequestContextFilter，Spring容器与Web容器结合的更加密切 -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	
	<!-- javamelody配置信息 -->
	<listener>
	    <listener-class>net.bull.javamelody.SessionListener</listener-class>
	</listener>
	<!-- 监听器 end -->


	<!-- 配置参数 begin -->
	<!-- applicationContext.xml路径 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:/spring/applicationContext.xml</param-value>
	</context-param>
	<!-- 配置参数 end -->

	<!-- 过滤器 begin -->
	<!-- Spring 整合Jersey，并与前端交互必须使用SpringServlet过滤器过滤出请求，否则前端页面不显示或者请求404 -->
	<filter>
		<filter-name>jerseySpring</filter-name>
		<filter-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</filter-class>
		<init-param>
			<param-name>com.sun.jersey.config.feature.Redirect</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>com.sun.jersey.config.feature.FilterForwardOn404</param-name>
			<param-value>true</param-value>
		</init-param>
		<!-- 过滤静态页面，否则页面不显示或者静态文件无法加载 -->
		<init-param>
			<param-name>com.sun.jersey.config.property.WebPageContentRegex</param-name>
			<param-value>/(images|css|jsp|js|html)/.*</param-value>
		</init-param>
		<!-- Jersy返回PoJO对象必须添加否则会报MIME media type application/json was not found.异常 -->
		<init-param>
			<param-name>com.sun.jersey.api.json.POJOMappingFeature</param-name>
			<param-value>true</param-value>
		</init-param>
		<!-- 指定Jersey资源类包所在路径 -->
		<init-param>
			<param-name>com.sun.jersey.config.property.packages</param-name>
			<param-value>com.kida.home.controller</param-value>
		</init-param>
	</filter>
	
	<!-- javamelody -->
	<filter>
	    <filter-name>javamelody</filter-name>
	    <filter-class>net.bull.javamelody.MonitoringFilter</filter-class>
	    <init-param>
	        <param-name>monitoring-path</param-name>
	        <param-value>/monitor</param-value>
	    </init-param>
	    <init-param>
	        <param-name>authorized-users</param-name>
	        <param-value>kida:yuanzhenhui</param-value>
	    </init-param>
	</filter>

	<filter-mapping>
		<filter-name>jerseySpring</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<filter-mapping>
	    <filter-name>javamelody</filter-name>
	    <url-pattern>/*</url-pattern>
	    <dispatcher>REQUEST</dispatcher>
	    <dispatcher>ASYNC</dispatcher>
	</filter-mapping>
	<!-- 过滤器 end -->
</web-app>